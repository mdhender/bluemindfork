@use "sass:map";

// Component size

.form-input-md {
    height: $input-height;
}
.form-input-sm {
    height: $input-height-sm;
}

// Core input border

.form-input.underline > .form-control {
    border-radius: 0;
    border-top-color: transparent !important; // keep it to simplify vertical padding management
    border-left: none;
    border-right: none;
}

.form-input.inline > .form-control {
    border-radius: 0;
    border: none !important;
}

.form-input {
    &:focus-within,
    &:focus,
    &.focus {
        > .form-control {
            border-width: 2 * $input-border-width;
        }
    }
}

// Paddings

$items-info: (
    "icon": (
        "width": map-get($icon-sizes, "md"),
        "selector": ".icon-wrapper"
    ),
    "reset": (
        "width": map-get($btn-close-sizes, "sm"),
        "selector": ".reset-btn"
    )
);

@mixin generate-paddings-for-root($outline, $padding-x) {
    @if $outline {
        .form-input.outline {
            > .form-control {
                padding: 0 $padding-x !important;
            }
            &:focus-within,
            &:focus,
            &.focus {
                > .form-control {
                    // compensate padding for thicker lateral border:
                    padding: 0 calc(#{$padding-x} - #{$input-border-width}) !important;
                }
            }
        }
    } @else {
        .form-input:not(.outline) > .form-control {
            padding: 0 $padding-x !important;
        }
    }
}

@mixin padding-in-form-control($value) {
    &.icon-left {
        padding-left: $value !important;
    }
    &:not(.icon-left) {
        padding-right: $value !important;
    }
}

@mixin generate-paddings-for($item, $outline, $padding-x, $spacing-x) {
    $offset: $padding-x + map-get($items-info, $item, "width") + $spacing-x;
    $root-selector: ".form-input" + if($outline, ".outline", ":not(.outline)");
    $control-selector: " > .form-control.with-" + $item;
    #{$root-selector} #{$control-selector} {
        @include padding-in-form-control($offset);
        @if $outline {
            &:focus-within,
            &:focus,
            &.focus {
                // compensate padding for thicker lateral border:
                @include padding-in-form-control(calc(#{$offset} - #{$input-border-width}));
            }
        }
    }
}

@mixin generate-variant-paddings($outline, $padding-x, $spacing-x) {
    @include generate-paddings-for-root($outline, $padding-x);
    @each $item in "icon", "reset" {
        @include generate-paddings-for($item, $outline, $padding-x, $spacing-x);
    }
}

@include generate-variant-paddings($outline: true, $padding-x: $sp-5, $spacing-x: $sp-4);
@include generate-variant-paddings($outline: false, $padding-x: $sp-4, $spacing-x: $sp-4);

// Icon and reset button padding and margin

.form-input .icon-wrapper {
    display: flex;
    align-items: center;
    gap: $sp-3;
}

@each $selector, $margin-x in (".outline": $sp-5, ":not(.outline)": $sp-4) {
    .form-input#{$selector} {
        .icon-wrapper,
        .reset-btn {
            top: 0;
            height: 100%;
            &:not(.icon-left) {
                left: auto;
                right: $margin-x;
                margin-left: $margin-x;
                margin-right: 0;
            }
            &.icon-left {
                left: $margin-x;
                right: auto;
                margin-left: 0;
                margin-right: $margin-x;
            }
        }
    }
}

// Colors

@mixin form-input-colors(
    $normal-text: null,
    $normal-placeholder: null,
    $normal-icon: null,
    $normal-stroke: null,
    $hovered-text: null,
    $hovered-icon: null,
    $hovered-stroke: null,
    $disabled-text: null,
    $disabled-placeholder: null,
    $disabled-icon: null,
    $disabled-stroke: null,
    $disabled-bg: null,
    $focused-text: null,
    $focused-icon: null,
    $focused-stroke: null
) {
    > .form-control {
        color: $normal-text;
        border-color: $normal-stroke;
        background-image: none !important;
        box-shadow: none !important;
        &::placeholder {
            color: $normal-placeholder;
        }
    }
    .ornament-icon {
        color: $normal-icon;
    }

    &:hover,
    &.hover {
        > .form-control {
            color: $hovered-text;
            border-color: $hovered-stroke;
        }
        .ornament-icon {
            color: $hovered-icon;
        }
    }

    &:focus-within,
    &:focus,
    &.focus {
        > .form-control {
            color: $focused-text;
            border-color: $focused-stroke;
        }
        .ornament-icon {
            color: $focused-icon;
        }
    }

    &.disabled {
        > .form-control {
            color: $disabled-text;
            border-color: $disabled-stroke;
            &::placeholder {
                color: $disabled-placeholder;
            }
        }
        &.outline > .form-control {
            background-color: $disabled-bg;
        }
        &.underline > .form-control {
            border-color: transparent;
        }
        .ornament-icon {
            color: $disabled-icon;
        }
    }
}

.form-input {
    @include form-input-colors(
        $normal-text: $neutral-fg,
        $normal-placeholder: $neutral-fg-lo1,
        $normal-icon: $neutral-fg,
        $normal-stroke: $neutral-fg-lo1,
        $hovered-text: $neutral-fg-hi1,
        $hovered-icon: $neutral-fg-hi1,
        $hovered-stroke: $neutral-fg-hi1,
        $disabled-text: $neutral-fg-lo1,
        $disabled-placeholder: $neutral-fg-disabled,
        $disabled-icon: $neutral-fg-disabled,
        $disabled-stroke: $neutral-fg-disabled,
        $disabled-bg: $neutral-bg-lo1,
        $focused-text: $neutral-fg-hi1,
        $focused-icon: $secondary-fg,
        $focused-stroke: $secondary-fg
    );
}

.form-input.underline {
    @include form-input-colors(
        $normal-stroke: $neutral-fg-lo2,
        $hovered-stroke: $neutral-fg,
        $disabled-stroke: transparent,
        $focused-stroke: $secondary-fg
    );
}

.form-input.is-invalid {
    @include form-input-colors(
        $normal-icon: $danger-fg,
        $normal-stroke: $danger-fg,
        $hovered-icon: $danger-fg-hi1,
        $hovered-stroke: $danger-fg-hi1,
        $disabled-icon: $neutral-fg-disabled,
        $disabled-stroke: $neutral-fg-disabled,
        $focused-icon: $danger-fg-hi1,
        $focused-stroke: $danger-fg-hi1
    );
}

.form-input.is-valid {
    @include form-input-colors(
        $normal-stroke: $success-fg,
        $hovered-stroke: $success-fg-hi1,
        $disabled-stroke: $neutral-fg-disabled,
        $focused-stroke: $secondary-fg
    );
}

.form-input.inline.on-fill-primary {
    @include form-input-colors(
        $normal-text: $fill-primary-fg,
        $normal-placeholder: $fill-primary-fg-lo1,
        $normal-icon: $fill-primary-fg,
        $hovered-text: $fill-primary-fg,
        $hovered-icon: $fill-primary-fg-hi1,
        $disabled-text: $fill-primary-fg-lo1,
        $disabled-placeholder: $fill-primary-fg-disabled,
        $disabled-icon: $fill-primary-fg-disabled,
        $disabled-bg: $fill-primary-bg-lo1,
        $focused-text: $fill-primary-fg,
        $focused-icon: $fill-primary-fg-hi1
    );
}

// Form group

.form-group label {
    @include regular;
    text-align: start;
    margin-bottom: $sp-2;
}

.form-input {
    & ~ small,
    & ~ .invalid-feedback,
    & ~ .valid-feedback {
        @include caption;
        text-align: start;
        margin-top: $sp-3;
    }

    & ~ .invalid-feedback {
        color: $danger-fg;
    }
    & ~ .valid-feedback {
        color: $success-fg;
    }
}
