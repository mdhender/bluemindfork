# Utility functions to run equinox based applications
#BEGIN LICENSE
#
# Copyright Â© Blue Mind SAS, 2012-2016
#
# This file is part of BlueMind. BlueMind is a messaging and collaborative
# solution.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the GNU Affero General Public License as
# published by the Free Software Foundation (version 3 of the License).
#
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See LICENSE.txt

# without the X server dependency of eclipse generated launchers
#
export LANG="en_US.UTF-8"
export LC_TYPE="en_US.UTF-8"
export LC_ALL=$LANG

BASEDIR=$(dirname $(readlink -f "$0"))
if [ $# -ne 1 ]; then
     echo "usage: . $0 <product-name>"
     exit 1
fi

product=$1

if [ -e "/etc/bm/${product}.disabled" ]; then
   echo "File: /etc/bm/${product}.disabled exist. ${product} is disabled."
   exit 0
fi

MEM=${DEFAULT_MEM:-1024}
# At least 1024 for bm-cli
[ ${MEM} -lt 1024 ] && MEM=1024

JVM_EXT_OPTS=""
if [ -d /etc/bm/default -a -f "/etc/bm/default/${product}.ini" ]; then
   source "/etc/bm/default/${product}.ini"
fi
if [ -d /etc/bm/local -a -f "/etc/bm/local/${product}.ini" ]; then
   source "/etc/bm/local/${product}.ini"
fi

if [ -d /etc/bm/local -a -f "/etc/bm/local/${product}.log.xml" ]; then
   JVM_OPTS="${JVM_OPTS} -Dlogback.configurationFile=/etc/bm/local/${product}.log.xml"
elif [ -d /usr/share/bm-conf/logs/ -a -f "/usr/share/bm-conf/logs/${product}.log.xml" ]; then
   JVM_OPTS="${JVM_OPTS} -Dlogback.configurationFile=/usr/share/bm-conf/logs/${product}.log.xml"
fi

PRODUCT_DIR=/var/lib/${product}
PRODUCT_WORK_DIR=${PRODUCT_DIR}/work
PRODUCT_TMP_DIR=${PRODUCT_DIR}/tmp

[ -z "$AGENT_ENABLED" ] && AGENT_ENABLED=1
METRICS_LIBDIR=/var/lib/bm-metrics-agent
METRICS_STATE_LIBDIR=${METRICS_LIBDIR}/state
METRICS_STATE_PRODUCT_FILE=${METRICS_STATE_LIBDIR}"/"${product}".state"
METRICS_RUNDIR=/var/run/bm-metrics
METRICS_LOGDIR=/var/log/bm-metrics

JVM_OPTS="${JVM_OPTS} -Dio.netty.native.workdir=${PRODUCT_WORK_DIR} -Djava.io.tmpdir=${PRODUCT_TMP_DIR}"

GC_DIR=/var/log/garbage-collector/${product}
GC_POSE_LOG="${GC_DIR}/gc.pause.log"

# TODO: convert https://docs.oracle.com/javase/9/tools/java.htm#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5__CONVERTGCLOGGINGFLAGSTOXLOG-A5046BD1
# JVM_OPTS="${JVM_OPTS} -Xloggc:${GC_DIR}/gc.pause.log"
# JVM_OPTS="${JVM_OPTS} -XX:+UseGCLogFileRotation"
# JVM_OPTS="${JVM_OPTS} -XX:NumberOfGCLogFiles=4"
# JVM_OPTS="${JVM_OPTS} -XX:GCLogFileSize=4M"
# JVM_OPTS="${JVM_OPTS} -XX:+PrintGCApplicationStoppedTime"

JVM_OPTS="${JVM_OPTS} -server -Xmx${MEM}m"
JVM_OPTS="${JVM_OPTS} -XX:+UseCompressedOops"
JVM_OPTS="${JVM_OPTS} -XX:-OmitStackTraceInFastThrow"

# G1 stuff
JVM_OPTS="${JVM_OPTS} -XX:+UseG1GC"
JVM_OPTS="${JVM_OPTS} -XX:MaxGCPauseMillis=500"

if [ "x${OOM}" = "x" ]; then
    JVM_OPTS="${JVM_OPTS} -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log"
else
    JVM_OPTS="${JVM_OPTS} ${OOM}"
fi
JVM_OPTS="${JVM_OPTS} -Djava.net.preferIPv4Stack=true"
JVM_OPTS="${JVM_OPTS} -Dnet.fortuna.ical4j.timezone.cache.impl=net.fortuna.ical4j.util.MapTimeZoneCache"
JVM_OPTS="${JVM_OPTS} -Dio.netty.noPreferDirect=true"
# https://bugs.openjdk.java.net/browse/JDK-8147468
JVM_OPTS="${JVM_OPTS} -Djdk.nio.maxCachedBufferSize=262144"
JVM_OPTS="${JVM_OPTS} -Dnet.bluemind.property.product=${product}"
JVM_OPTS="${BM_JVM_CUSTOM_OPTS} ${JVM_OPTS} "

# Hazelcast stuff
JVM_OPTS="${JVM_OPTS} --add-exports java.base/jdk.internal.ref=ALL-UNNAMED"
JVM_OPTS="${JVM_OPTS} --add-opens java.base/java.lang=ALL-UNNAMED"
JVM_OPTS="${JVM_OPTS} --add-opens java.base/java.nio=ALL-UNNAMED"
JVM_OPTS="${JVM_OPTS} --add-opens java.base/sun.nio.ch=ALL-UNNAMED"
JVM_OPTS="${JVM_OPTS} --add-opens java.management/sun.management=ALL-UNNAMED"
JVM_OPTS="${JVM_OPTS} --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"

# Chronicle Queue
JVM_OPTS="${JVM_OPTS} --add-opens java.base/java.lang.reflect=ALL-UNNAMED"

# BlueMind stuff
# core
JVM_OPTS="${JVM_OPTS} --add-opens java.base/java.lang.invoke=ALL-UNNAMED"

epackage=org.eclipse.equinox.launcher
equinox_main_class=${epackage}.Main

function get_systemtimezone() {
    if ! command -v realpath >/dev/null; then
        echo GMT
        return
    fi

    if [ ! -L /etc/localtime ]; then
        echo GMT
        return
    fi
    realpath --relative-to /usr/share/zoneinfo /etc/localtime
}

function bm_equinox_run_server_appid() {
    test $# -ge 2 || {
        bm_equinox_usage
        exit 1
    }
    test -d "$1" || {
        bm_equinox_usage
        exit 1
    }

    app_install_dir="$1"
    appid_to_run="$2"
    shift 2

    if [ ${UID} -eq 0 ]; then
        ulimit -n 65536
        ulimit -c unlimited
        rm -rf ${PRODUCT_DIR}
        resync_plugins
    fi

    bm_equinox_get_jar "${app_install_dir}"
    test -f "${equinox_jar}" || {
        echo "equinox jar not found (${equinox_jar})."
        exit 1
    }

    if [ -f /var/lib/bm-metrics-agent/bm-metrics-agent.jar ] && [ "${AGENT_ENABLED}" -eq "1" ]; then
        JVM_OPTS="${JVM_OPTS} -javaagent:/var/lib/bm-metrics-agent/bm-metrics-agent.jar"
    fi

    SYSTEM_TZ=$(get_systemtimezone)
    [ -z "$SYSTEM_TZ" ] && SYSTEM_TZ=GMT

    # To debug:
    # launch with -clean -debug. Eg: /usr/share/bm-webserver/bm-webserver /var/run/bm-webserver.pid -clean -debug

    exec $JAVA_HOME/bin/java ${JVM_OPTS} ${JVM_EXT_OPTS} \
         -Djava.awt.headless=true -Duser.timezone=GMT \
         -Dosgi.sharedConfiguration.area=${BASEDIR}/configuration \
         "-Dnet.bluemind.property.system.timezone=${SYSTEM_TZ}" \
         -jar "${equinox_jar}" \
         -clean \
         -configuration "${PRODUCT_DIR}/configuration" \
         -application $appid_to_run "$@"
}

function bm_equinox_get_jar() {
    equinox_jar=$(find -L ${1}/plugins -name ${epackage}'_*.jar')
    return 0
}

function bm_equinox_usage() {
	echo "usage: <platform base dir> <equinox appid>"
}

# We remove all files in plugins/ because old bluemind installations
# are using plugins as a temporary directory, and files can be left
# behind. Debian/RedHat packages don't cleanup "untracked" files
function resync_plugins() {
  # Warn: symbolic linking does not work with equinox launcher...
  rm -rf "/usr/share/${product}/plugins" || true
  mkdir -p "/usr/share/${product}/plugins"
  (cd "/usr/share/${product}/pkg_plugins"; find . -type d -exec mkdir -p "/usr/share/${product}/plugins/{}" \;)
  find "/usr/share/${product}/pkg_plugins" -type f -exec ln -f {} "/usr/share/${product}/plugins" \;

  # Sometimes tmpdir is not available
  mkdir -p /etc/${product} \
          ${PRODUCT_DIR} ${PRODUCT_WORK_DIR} ${PRODUCT_TMP_DIR} \
          ${METRICS_LIBDIR} ${METRICS_STATE_LIBDIR} ${METRICS_RUNDIR} ${METRICS_LOGDIR} \
          ${GC_DIR} \
          /var/log/${product} \
          /usr/share/${product}/plugins \
          /usr/share/${product}/p2 \
          /usr/share/${product}/extensions \
          /var/log/garbage-collector/${product}
}

# Params:
#  group - mandatory
#  logDirname - optional, set to product if not defined
function bm_pre_start() {
    if [ ${UID} -ne 0 ]; then
        echo "Must be run as root"
        exit 1
    fi
    
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "usage: group [logDirname]"
        exit 1
    fi
    
    pre_group=$1
    pre_logDirname=$2
    if [ -z "${logDirname}" ]; then
        pre_logDirname=${product}
    fi

    rm -rf ${METRICS_STATE_PRODUCT_FILE} ${GC_POSE_LOG:?} ${PRODUCT_DIR}

    resync_plugins
        
    chmod 775 /etc/${product} \
        ${PRODUCT_DIR} ${PRODUCT_WORK_DIR} ${PRODUCT_TMP_DIR} \
        ${METRICS_LIBDIR} ${METRICS_STATE_LIBDIR} ${METRICS_RUNDIR} ${METRICS_LOGDIR} \
        ${GC_DIR} \
        /usr/share/${product}/plugins \
        /usr/share/${product}/configuration \
        /usr/share/${product}/extensions \
        /usr/share/${product}/p2 \
        /var/log/${pre_logDirname}
    
    chgrp -R ${pre_group} /etc/${product} \
        ${PRODUCT_DIR} ${PRODUCT_WORK_DIR} ${PRODUCT_TMP_DIR} \
        ${METRICS_LIBDIR} ${METRICS_STATE_LIBDIR} ${METRICS_RUNDIR} ${METRICS_LOGDIR} \
        ${GC_DIR} \
        /var/log/${pre_logDirname} \
        /usr/share/${product}/configuration \
        /usr/share/${product}/p2 \
        /usr/share/${product}/plugins \
        /usr/share/${product}/extensions
        
    chmod -R g+w /etc/${product} \
        ${PRODUCT_DIR} ${PRODUCT_WORK_DIR} ${PRODUCT_TMP_DIR} \
        ${METRICS_LIBDIR} ${METRICS_STATE_LIBDIR} ${METRICS_RUNDIR} ${METRICS_LOGDIR} \
        ${GC_DIR} \
        /var/log/${pre_logDirname} \
        /usr/share/${product}/configuration \
        /usr/share/${product}/p2 \
        /usr/share/${product}/plugins \
        /usr/share/${product}/extensions
}

# Params:
#  group - mandatory
function bm_post_start() {
    if [ $# -ne 1 ]; then
        echo "usage: group"
        exit 1
    fi
    
    post_group=$1
    [ -f /var/run/bm-metrics/metrics-${product}.sock ] && chgrp ${post_group} /var/run/bm-metrics/metrics-${product}.sock
    exit 0
}

# vim:syntax=sh filetype=sh
