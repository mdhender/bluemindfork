#!/bin/bash
#BEGIN LICENSE
#
# Copyright Â© Blue Mind SAS, 2020
#
# This file is part of BlueMind. BlueMind is a messaging and collaborative
# solution.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the GNU Affero General Public License as
# published by the Free Software Foundation (version 3 of the License).
#
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#
#END LICENSE

JAVA_HOME=/usr/lib/jvm/bm-jdk
jps=$JAVA_HOME/bin/jps
jmap=$JAVA_HOME/bin/jmap

servicesInBluemindTarget=$(systemctl list-dependencies --plain bluemind.target | grep -Fv bluemind.target | sort | uniq)
servicesStatus=${servicesInBluemindTarget}

function fillServiceStatus() {
  local servicesNotInBluemindTarget="bm-nginx unknown"

  for service in ${servicesNotInBluemindTarget}; do
    if systemctl list-units --full --all 2>/dev/null | awk '$1 ~ /\.service$/ { sub("\\.service$", "", $1); print $1 }' | grep -Fq ${service}; then
      servicesStatus=${service}" "${servicesStatus}
    fi
  done
}

function product() {
  srv=$1
  op=$2

  service $srv $op > /dev/null 2>&1
  ret=$?

  return $ret
}

start_bm() {
  echo "Start BlueMind Services"
  systemctl start bluemind.target
}

stop_bm() {
  echo "Stop BlueMind Services"
  systemctl stop bluemind.target
}

restart_bm() {
  echo "Restarting BlueMind Services"
  systemctl restart bluemind.target
}

restart_exceptnode_bm() {
  echo "Restarting BlueMind Services except Node"
  systemctl restart ${servicesInBluemindTarget//bm-node.service}
}

function memory_report() {
    total_mem=0
    for svc in $(systemctl list-dependencies --plain bluemind.target | grep -Fv bluemind.target | sort | uniq); do
	curmem=$(systemctl show -p MemoryCurrent ${svc} |cut -b15-)
	if [[ $curmem =~ ^[0-9]+$ ]]; then
	    echo "Usage for ${svc} is ${curmem}"
	    total_mem=$(($total_mem + $curmem))
	fi
    done

    gigab=$(($total_mem / 1024 / 1024/ 1024))
    echo "Total usage is ${total_mem} (${gigab} GB)"
}

# Waiting for https://github.com/systemd/systemd/issues/3174
function status_bm() {
  if systemctl status bluemind.target > /dev/null 2>&1; then
    status_bm_started
  else
    status_bm_stopped
  fi
}

function status_bm_stopped() {
  ret=0
  for service in ${servicesStatus}; do
    if isServiceDisabled ${service}; then
      echo ${service}" is disabled on this node"
      continue
    fi

    if systemctl status ${service} > /dev/null 2>&1; then
      ret=1
      echo ${service}" started while BlueMind is stopped - please restart bluemind: systemctl restart bluemind.target"
    else
      echo ${service}" is stopped."
    fi
  done
  
  return ${ret}
}

function status_bm_started() {
  ret=0
  for service in ${servicesStatus}; do
    if isServiceDisabled ${service}; then
      echo ${service}" is disabled on this node"
      continue
    fi

    if ! systemctl status ${service} > /dev/null 2>&1; then
      ret=1
      echo ${service}" fail - check systemctl status "${service}" and journalctl -xe -u "${service}
    else
      echo ${service}" is running."
    fi
  done
  
  return ${ret}
}

function isServiceDisabled() {
  local service=$1

  [ -e "/etc/bm/"$(echo ${service} | sed -e 's/\.service$/.disabled/') ] && return 0

  return 1
}

help() {
  echo "Usage: "$0" [start|stop|status|reload|restart|all_status|memory]"
  echo -e "\tstart: start Blue Mind services"
  echo -e "\tstop: stop Blue Mind services"
  echo -e "\tstatus: display Blue Mind core service status"
  echo -e "\treload|restart: restart Blue Mind services"
  echo -e "\trestart-exceptnode: restart Blue Mind services except bm-node service"
  echo -e "\tmemory: display Blue Mind memory usage"
}

fillServiceStatus

case "$1" in
  start)
      start_bm
      ;;
  stop)
      stop_bm
      ;;
  status|all_status)
      status_bm
      ;;
  reload)
      restart_bm
      ;;
  restart)
      restart_bm
      ;;
  restart-exceptnode)
      restart_exceptnode_bm
      ;;
  memory)
      memory_report
      ;;
  *)
      help
      ;;
esac
