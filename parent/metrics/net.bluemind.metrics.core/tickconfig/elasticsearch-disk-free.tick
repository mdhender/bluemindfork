var datalocation string

var bmProduct string

var alertsEndPoint string

var name string

var db = 'telegraf'

var rp = 'autogen'

var measurement = 'elasticsearch_fs'

var groupBy = ['host']

var whereFilter = lambda: ("datalocation" == datalocation)

var idTag = 'alertID'

var levelTag = 'level'

var messageField = 'message'

var durationField = 'duration'

var outputDB = 'chronograf'

var outputRP = 'autogen'

var outputMeasurement = 'alerts'

var triggerType = 'threshold'

var info = 60

var warn = 70

var crit = 80

var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |eval(lambda: int((float("total_total_in_bytes") - float("total_available_in_bytes")) / float("total_total_in_bytes") * 100.0))
        .as('value')

var trigger = data
    |alert()
        .info(lambda: "value" >= info)
        .warn(lambda: "value" >= warn)
        .crit(lambda: "value" >= crit)
        .message('elasticsearch disk free below threshold')
        .id(name)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .stateChangesOnly()
        .post(alertsEndPoint)

trigger
    |eval(lambda: 100.0 - float("value"))
        .as('value')
        .keep()
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')
