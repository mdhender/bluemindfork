var name string
var datalocation string
var alertId string
var maxWaitingTimeInMs int

var db = 'telegraf'
var rp = 'autogen'
var measurement = 'bm-core.imap.usersWaitingDuration'

var whereFilter = lambda: ("datalocation" == datalocation)
var groupBy = ['user']

var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .where(whereFilter)
        .groupBy(groupBy)
    |window().period(1m).every(10s)
    |difference('count').as('waiting_time')
    |sum('waiting_time').as('total_waiting_time')

var message = 'Imap user {{ index .Tags "user"}} has reached throughput limit'
var idVar = alertId
var idTag = 'alertID'
var levelTag = 'level'
var messageField = 'message'
var durationField = 'duration'

var trigger = data
    |alert()
        .message(message)
      	.warn(lambda: "total_waiting_time" > maxWaitingTimeInMs)
      	.warnReset(lambda: "total_waiting_time" == 0)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .stateChangesOnly()

var outputDB = 'chronograf'
var outputRP = 'autogen'
var outputMeasurement = 'alerts'
var triggerType = 'threshold'

trigger
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')
