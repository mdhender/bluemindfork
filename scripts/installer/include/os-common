# On success, at the end INSTALLER_VERSION and OS_VERSION equal to one of those values
REDHAT7="redhat-7"
REDHAT8="redhat-8"
UBUNTU_BIONIC="ubuntu-bionic"
UBUNTU_FOCAL="ubuntu-focal"
UBUNTU_JAMMY="ubuntu-jammy"
DEBIAN_BUSTER="debian-buster"
DEBIAN_BULLSEYE="debian-bullseye"

check_redhat7() {
    if [  -e /etc/system-release ]; then
        release=`cat /etc/system-release`
        
        if [[ "${release}" == *"release 7."* ]]; then
            return 0
        fi
    fi
    
    return 1
}

check_redhat8() {
    if [  -e /etc/system-release ]; then
        release=`cat /etc/system-release`
        
        if [[ "${release}" == *"release 8."* ]]; then
            return 0
        fi
    fi
    
    return 1
}

check_ubuntu() {
    if [ -e "/etc/lsb-release" ]; then
        source /etc/lsb-release
        if [ "${DISTRIB_RELEASE}" == $1 ]; then
            return 0
        fi
    fi
    
    return 1
}

check_debian_bullseye() {
    if [ -e "/etc/debian_version" ]; then
        release=`cat /etc/debian_version`
        if [[ "${release}" == *"11."* ]]; then
            return 0
        fi
    fi
    
    return 1
}

check_debian_buster() {
    if [ -e "/etc/debian_version" ]; then
        release=`cat /etc/debian_version`
        if [[ "${release}" == *"10."* ]]; then
            return 0
        fi
    fi
    
    return 1
}

check_diskfree() {
    path="$1"
    minimum_kb="$2"
    [ -z "$path" ] || [ -z "$minimum_kb" ] && return 0
    avail=$(df -k --output=avail "$path" 2>/dev/null | tail -n+2)
    if [ "$avail" -gt "$minimum_kb" ]; then
        return 0
    else
        return 1
    fi

}

detect_os() {
    if [ -e "./rhel7" ]; then
        INSTALLER_VERSION=${REDHAT7}
        if check_redhat7; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-redhat-base"
        fi
    fi
    
    if [ -e "./rhel8" ]; then
        INSTALLER_VERSION=${REDHAT8}
        if check_redhat8; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-redhat-base"
        fi
    fi

    if [ -e "./bionic" ]; then
        INSTALLER_VERSION=${UBUNTU_BIONIC}
        if check_ubuntu "18.04"; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-debian-squeeze-base"
        fi
    fi
    
    if [ -e "./focal" ]; then
        INSTALLER_VERSION=${UBUNTU_FOCAL}
        if check_ubuntu "20.04"; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-debian-squeeze-base"
        fi
    fi

    if [ -e "./jammy" ]; then
        INSTALLER_VERSION=${UBUNTU_JAMMY}
        if check_ubuntu "22.04"; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-debian-squeeze-base"
        fi
    fi

    if [ -e "./bullseye" ]; then
        INSTALLER_VERSION=${DEBIAN_BULLSEYE}
        if check_debian_bullseye; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-debian-squeeze-base"
        fi
    fi

    if [ -e "./buster" ]; then
        INSTALLER_VERSION=${DEBIAN_BUSTER}
        if check_debian_buster; then
            OS_VERSION=${INSTALLER_VERSION}
            source "./include/os-debian-squeeze-base"
        fi
    fi

    if [ -z ${OS_VERSION} ]; then
        display_error "${txt_os_not_supported}" ${INSTALLER_VERSION}
        exit 1
    else
        display_message "${txt_os}" ${OS_VERSION_CN}
    fi
}

read_stdin() {
    if [ ! -z ${interactive} ]; then
        echo $1
    else
        read response
        echo $response
    fi
}
